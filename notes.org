
* Rising

Fetch instruction
Decode instruction
Calc controlebits
Fetch Register data
Compute Alu result

* Falling
Fetch/put data from/into memory
write to register
Increment PC or set PC

* Instructions
R instructions:
- add
- sub
- and
- xor
- or
- slt
  add $1, $2, $var

- jr
  jr $23

- sll
- srl
  sll $rd, $rt, 16

I-instructions
- addi
  addi $23, $var, 16
- lui
  lui $23, 32

- lw
- sw
  sw $reg1, label, $reg2

- beq
- bne
  bne $reg1, $reg2, label

J-instructions
- j
  j label
  j 23

** Options
data Instruction = R opcode rs rt shamt aluop or num | I opcode rs rt imm or num | J opcode addr or num

data Control = SecondInput | Jump | MemAction DataAct | RegAction DataAct

data SecondInput = Shamt | Reg | Immediate
data DataAct = Write | Read

data AluOp = AddOp | SubOp | AndOp | OrOp | SltOp | SrtOp | EqOp | NeqOp | NopOp


data MemoryComp a = MemoryComp {
    memData :: [a]
    , output :: a
    , deltaMem :: Maybe Int
}

data RegComp = RegComp {
    regData :: [Int]
    , regA :: Int
    , regB :: Int
    , shamt :: Int
    , immediate :: Int
    , deltaReg :: Maybe Int
}

data BipsArch = BipsArch {
    mem :: MemoryComp Int
    , reg :: RegComp
    , imem :: MemoryComp Int
    , clock :: Double
}

* Todo
* Pips
** TODO Rewrite assembler to use raw Instruction
** TODO write more examples
** TODO Test addi instructions and beqs
** TODO Write documentation
** TODO Write multiplication program
** TODO benchmark some programs
** TODO Make architecture diagram
** TODO Make table for supported instructions
** TODO Make skeleton for report
** TODO Loosen up TUI from the architecture ADT
The tui must be a dumb ui, that is nothing more than a few tables

** TODO Add editor feature
** TODO Clean up Main


The highlight feature of the table, is something specific to this table.
